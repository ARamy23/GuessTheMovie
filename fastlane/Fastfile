# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'json'

default_platform(:ios)

# Gathering 3rd party Keys and Secrets from Configs
def file_prepend(file, str)
  new_contents = ""
  File.open(file, 'r') do |fd|
    contents = fd.read
    new_contents = str << contents
  end
  # Overwrite file but now with prepended string on it
  File.open(file, 'w') do |fd| 
    fd.write(new_contents)
  end
end

def update_changelog 
  tags = git_tags(limit: 2)
      current_tag = tags.first
      changelog = changelog_from_git_commits(
        between: tags,  # Optional, lets you specify a revision/tag range between which to collect commit info
        pretty: "    - %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
        date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
        match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
        merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
      )

      file_prepend('../CHANGELOG.md', "## Updates of version #{current_tag} ðŸš€\n#{changelog}\n\n")
end

platform :ios do
  before_all do
    @configs = JSON.parse(File.read('./Config.json'), object_class: OpenStruct)
    @local_configs = JSON.parse(File.read('./LocalConfig.json'), object_class: OpenStruct)
    
    ENV["FASTLANE_USER"] = ENV["GH_FASTLANE_USER"] || ENV["FASTLANE_USER"]
    ENV["PILOT_USERNAME"] = ENV["GH_PILOT_USERNAME"] || @local_configs.apple.username || ENV["PILOT_USERNAME"]
    ENV["FASTLANE_PASSWORD"] = ENV["GH_FASTLANE_PASSWORD"] || ENV["FASTLANE_PASSWORD"]
    ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] = ENV["GH_FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] || ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"]
    ENV["SLACK_URL"] = ENV["GH_SLACK_WEBHOOK_LINK"] || @configs.slack.hook || ENV["SLACK_URL"]
    ENV["SLACK_CHANNEL"] = ENV["GH_SLACK_CHANNEL"] || ENV["SLACK_CHANNEL"]
    ENV["APP_IDENTIFIER"] = ENV["GH_APP_IDENTIFIER"] || ENV["APP_IDENTIFIER"] || @local_configs.app_identifier #bundle identifier
    ENV["APP_NAME"] = ENV["GH_APP_NAME"] || ENV["APP_NAME"] || @local_configs.app_name
    ENV["APPLE_ID"] = ENV["GH_APPLE_ID"] || ENV["APPLE_ID"] || @local_configs.apple.apple_id
    ENV["TEAM_ID"] = ENV["GH_TEAM_ID"] || ENV["TEAM_ID"] || @local_configs.team_id
    ENV["ITC_TEAM_ID"] = ENV["GH_ITC_TEAM_ID"] || ENV["ITC_TEAM_ID"] || @local_configs.itc_team_id
    ENV["SENTRY_AUTH_TOKEN"] = ENV["GH_SENTRY_AUTH_TOKEN"] || @configs.sentry.auth_token || ENV["SENTRY_AUTH_TOKEN"] #sentry auth token
    ENV["SENTRY_ORG_SLUG"] = ENV["GH_SENTRY_ORG_SLUG"] || @configs.sentry.org_slug || ENV["SENTRY_ORG_SLUG"] #sentry auth token
    ENV["SENTRY_PROJECT_SLUG"] = ENV["GH_SENTRY_PROJECT_SLUG"] || @configs.sentry.proj_slug || ENV["SENTRY_PROJECT_SLUG"] #sentry auth token
    ENV["PRODUCE_APP_NAME"] = ENV["GH_PRODUCE_APP_NAME"] || @local_configs.app_name #produce app name
  end

  lane :fetch_dysm_and_upload_to_sentry do 
    download_dsyms
    sentry_upload_dsym
  end
  lane :upload_dysm_to_sentry do
    sentry_upload_dsym
  end
  
  lane :beta do 
    # Beta Release
    setup_ci if ENV['CI']
    # Handles any versionings and Changelogs maintenance
    xcode_vesion = get_version_number
    latest_git_tag_version = last_git_tag

    is_same_vesion = Gem::Version.new(xcode_vesion) == Gem::Version.new(latest_git_tag_version)
    is_new_version = Gem::Version.new(xcode_vesion) < Gem::Version.new(latest_git_tag_version)

    if is_same_vesion
      increment_build_number
    elsif is_new_version
      increment_build_number(
        build_number: 1
      )

      increment_version_number(
        version_number: latest_git_tag_version
      )
    else 
      abort(`Something went wrong, the Xcode version can't be greater than the latest git tag version\nCurrentVersion: #{xcode_vesion}\nGit Tag Version: #{latest_git_tag_version}`)
    end

    # Test
    # scan
    
    # Builds and prepare for exporting the app
    gym(
    export_method: "app-store",
    export_xcargs: "-allowProvisioningUpdates",
    configuration: "Staging",
    include_symbols: true,
    include_bitcode: false,
    )
    
    # Generate Changelog from Git Commits
    changelog = changelog_from_git_commits(
      between: git_tags(limit: 2),  # Optional, lets you specify a revision/tag range between which to collect commit info
      pretty: "- %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
      date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
      match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
      merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
    )

    # Prepend Changelog to CHANGELOG.md
    update_changelog

    # Uploads the app to Testflight
    pilot(
      changelog: changelog,
    )
    
    # Deletes the generated Archive, IPA, Certificates, Profiles and/or dSYM Files
    sentry_upload_dsym

    clean_build_artifacts
    # Report Success
    slack
  end

  error do |lane, exception, options|
    # slack(
    #   message: "Ooops, looks like something went wrong :O\n\n\n#{exception.message}",
    #   success: false
    # )
  end
end
